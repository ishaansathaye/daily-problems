from typing import List


class Solution:
    def minMalwareSpread(self, graph: List[List[int]],
                         initial: List[int]) -> int:
        # null check
        n = len(graph)
        colors = [-1 for _ in range(n)]
        # colors to assign each group
        col = 0
        # O(v + e) -> v^2 (e is v^2)
        # since adjacency matrix not list
        for i in range(0, n):
            if colors[i] == -1:
                self.dfs(graph, colors, i, col)
                col += 1

        # groups list
        # how many nodes in each group
        groups = [0 for _ in range(col)]
        for i in range(n):  # O(v)
            c = colors[i]
            groups[c] += 1

        # initGroups
        # infected amount
        initGroups = [0 for _ in range(col)]
        for node in initial:  # O(v)
            cl = colors[node]
            initGroups[cl] += 1

        res = 2**31
        for node in initial:
            cl = colors[node]
            # how many nodes are infected initially
            # for the group of this node
            cnt = initGroups[cl]
            # only valid case when 1 node infected
            if cnt == 1:
                # very first candidate
                if res == 2**31:
                    res = node
                # if number of curr nodes can save
                # == nodes the result was saving
                # and currNode < res
                elif (groups[cl] == groups[colors[res]] and node < res):
                    res = node
                elif (groups[cl] > groups[colors[res]]):
                    # currNode is saving more nodes
                    # than earlier result
                    res = node

        if res == 2**31:
            return min(initial)
        return res

    def dfs(self, graph, colors, i, col):
        # base
        if colors[i] != -1:
            return

        # logic
        colors[i] = col
        # check i's node connections
        for j in range(0, len(graph)):
            if graph[i][j] == 1:
                self.dfs(graph, colors, j, col)
